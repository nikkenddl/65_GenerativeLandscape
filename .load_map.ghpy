from Rhino import Geometry as rg
import rhinoscriptsyntax as rs
import scriptcontext as sc
import Rhino as R
from pickle import loads
import base64

from rhinoscript import utility as rhutil
from itertools import compress
from lib_65land.config import Config
from lib_65land.Cell import Cell


def get_layer_objects(layer):
    """_summary_

    Parameters
    ----------
    layer : str

    Returns
    -------
    objs: (n,) rhino_object
    guids: (n,) str
    """
    if not isinstance(layer, str): raise Exception("method: get should receive str. received : {}".format(layer))
    
    sc.doc = R.RhinoDoc.ActiveDoc

    exists = rs.IsLayer(layer)
    if not exists: raise Exception("Layer:{} doesn't exist".format(layer))

    objs = list(rs.ObjectsByLayer(layer))
    sc.doc = ghdoc

    return objs

def get_user_texts(guid,key):
    """get user text from guid and key

    Parameters
    ----------
    guid : str
    key :str

    Returns
    -------
    user_text: str
    """
    sc.doc = R.RhinoDoc.ActiveDoc
    try:
        rst = rs.GetUserText(guid,key=key)
    except ValueError:
        raise Exception("key is not found : key:{}".format(key))
    sc.doc = ghdoc
    return str(rst)

def try_get_point_from_string(string):
    succeeds,point =  rg.Point3d.TryParse(string)
    if not point: raise Exception("failured to parse point. input:{}".format(string))
    return point

def load_base64_pickle(pickledata_base64):
    return loads(base64.b64decode(pickledata_base64))

def coercemesh(guid):
    sc.doc = R.RhinoDoc.ActiveDoc
    grid = rhutil.coercemesh(guid, True)
    sc.doc = ghdoc
    return grid

def load_map(forest_regions):
    config = Config()
    map_layer = config.map_layer_name

    guids = get_layer_objects(map_layer)
    if len(guids)!=1: raise Exception("number of map objects is not 1. found : {}".format(len(objs)))

    
    guid = guids[0]
    
    grid = coercemesh(guid)

    map_keys = config.map_keys

    x_cell_count = int(get_user_texts(guid,map_keys[0]))
    y_cell_count = int(get_user_texts(guid,map_keys[1]))
    grid_origin_coords = list(map(float,get_user_texts(guid,map_keys[2])[1:-1].split(",")))
    grid_origin = rg.Point3d(grid_origin_coords[0],grid_origin_coords[1],0)
    span = float(get_user_texts(guid,map_keys[3]))
    
    is_cell_in_region = load_base64_pickle(get_user_texts(guid,map_keys[4]))
    cell_IDs = [i for i,bo in enumerate(is_cell_in_region) if bo]
    
    cell_z_value = load_base64_pickle(get_user_texts(guid,map_keys[5]))
    cell_z_value = [cell_z_value[i] for i in cell_IDs]
    sunshine_duration_hour = load_base64_pickle(get_user_texts(guid,map_keys[6]))
    sunshine_duration_hour = [sunshine_duration_hour[i] for i in cell_IDs]
    soil_thickness = load_base64_pickle(get_user_texts(guid,map_keys[7]))
    soil_thickness = [soil_thickness[i] for i in cell_IDs]
    wind_speed = load_base64_pickle(get_user_texts(guid,map_keys[8]))
    wind_speed = [wind_speed[i] for i in cell_IDs]
    forest_region_id = load_base64_pickle(get_user_texts(guid,map_keys[9]))
    forest_region_id = [forest_region_id[i] for i in cell_IDs]
    
    grid_points = [grid.Faces.GetFaceCenter(i) for i in cell_IDs]
    for pt,z in zip(grid_points,cell_z_value):
        pt.Z = z
    
    created_time = get_user_texts(guid,map_keys[10])

    Cell.set_grid_info(grid_origin,x_cell_count,y_cell_count,span)
    
    cells,invalid_cell_points = Cell.create_from_map_info(cell_IDs,
                                                          grid_points,
                                                          sunshine_duration_hour,
                                                          soil_thickness,
                                                          wind_speed,
                                                          forest_region_id,
                                                          forest_regions
                                                          )
    
    return (
        grid,
        x_cell_count,
        y_cell_count,
        grid_origin,
        span,
        cells,
        invalid_cell_points,
        created_time,
    )

if forest_regions:
    grid,x_cell_count,y_cell_count,grid_origin,span,\
    cells,invalid_cell_points,\
    created_time = load_map(forest_regions)